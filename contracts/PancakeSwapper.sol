// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "https://github.com/pancakeswap/pancake-swap-periphery/blob/master/contracts/interfaces/IPancakeRouter02.sol";


contract PancakeSwapper {
    address internal constant ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;  // Mainnet 
    //address internal constant ROUTER_ADDRESS = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;  // Testnet 
    IPancakeRouter02 public pancakeRouter;
    
    constructor() {
        pancakeRouter = IPancakeRouter02(ROUTER_ADDRESS);
    }
    
    // The approval transactions for transfering the tokens to this contract will be generated by Metamask
    function batchSwap(address[] memory tokensAddresses, uint256[] memory amountIn, uint256[] memory amountOutMin, uint256 deadline) public {
        for(uint256 i = 0; i < tokensAddresses.length; i++){
            IERC20 curToken = IERC20(tokensAddresses[i]);
            require(curToken.transferFrom(msg.sender, address(this), amountIn[i]), 'transferFrom failed.');
            require(curToken.approve(ROUTER_ADDRESS, amountIn[i]), 'Router approval failed');
            pancakeRouter.swapExactTokensForETH(amountIn[i], amountOutMin[i], _getPathForTokentoETH(tokensAddresses[i]), tx.origin, deadline);
        }
    }
    
    function _getPathForTokentoETH(address tokenAddress) private view returns (address[] memory){
        address[] memory path = new address[](2);
        path[0] = tokenAddress;
        path[1] = pancakeRouter.WETH();
        return path;
    }
    
}